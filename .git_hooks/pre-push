#!/bin/sh

GITLAB_PROJECT_ID=53243565
CI_LINT_OUTPUT=/tmp/gitlab-ci-lint.json
RED_TEXT='\e[38;5;196m'
GREEN_TEXT='\e[38;5;46m'
RESET_TEXT='\e[0m'

if [ -r .set-gitlab-token.sh ]; then
  . ./.set-gitlab-token.sh
fi

STATUS=0
if [ -n "${GITLAB_ACCESS_TOKEN}" ]; then
  CONTENT="$(cat .gitlab-ci.yml)"
  jq --null-input --arg yaml "$CONTENT" '.content=$yaml' | \
  curl -s "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/ci/lint" \
    --header 'Content-Type: application/json' --header "PRIVATE-TOKEN: $GITLAB_ACCESS_TOKEN" \
    --data @- > $CI_LINT_OUTPUT
  VALID=$(jq -r .valid < "$CI_LINT_OUTPUT")
  if [ "$VALID" = "true" ]; then
        echo "GitLab CI valid: ${GREEN_TEXT}$VALID${RESET_TEXT}"
  else
    STATUS=1
    echo "GitLab CI valid: ${RED_TEXT}$VALID${RESET_TEXT}"
    echo "message: $(jq .message < "$CI_LINT_OUTPUT")"
    echo "errors: $(jq .errors < "$CI_LINT_OUTPUT")"
    echo "warnings: $(jq .warnings < "$CI_LINT_OUTPUT")"
  fi
else
  echo "please export GITLAB_ACCESS_TOKEN, possibly by editing .set-gitlab-token.sh"
  exit 1
fi
if [ $STATUS -gt 0 ]
then echo "Status after gitlab lint: ${RED_TEXT}${STATUS}${RESET_TEXT}"
else echo "Status after gitlab lint: ${GREEN_TEXT}${STATUS}${RESET_TEXT}"
fi

SCALA_VERSION=$(egrep 'scalaVersion := ".*"' build.sbt | cut -d \" -f 2)
GITLAB_SCALA_VERSION=$(egrep 'SCALA_VERSION. .*' .gitlab-ci.yml | head -n 1 | cut -d: -f 2 | xargs)
if [ "$SCALA_VERSION" != "$GITLAB_SCALA_VERSION" ]
then
  echo "Scala in build.sbt: ${RED_TEXT}${SCALA_VERSION}${RESET_TEXT}, in .gitlab-ci.yml: ${RED_TEXT}${GITLAB_SCALA_VERSION}${RESET_TEXT}"
  STATUS=1
else
  echo "Scala version: ${GREEN_TEXT}${SCALA_VERSION}${RESET_TEXT}"
fi

VERSION_SBT=$(egrep 'version := ".*"' build.sbt | cut -d \" -f 2)
VERSIONS_CI=$(egrep 'DEPLOYABLE_VERSION.*' .gitlab-ci.yml | head -n 1 | cut -d ':' -f 2 | xargs)
VERSION_SOURCE=$(egrep 'version\("menger v.* ' src/main/scala/menger/MengerCLIOptions.scala | cut -d 'v' -f 3 | cut -d ' ' -f 1)
if [ "$VERSION_SBT" != "$VERSIONS_CI" ]; then
  echo "Version in build.sbt: ${RED_TEXT}${VERSION_SBT}${RESET_TEXT}, in .gitlab-ci.yml: ${RED_TEXT}${VERSIONS_CI}${RESET_TEXT}"
  STATUS=1
fi
if [ "$VERSION_SBT" != "$VERSION_SOURCE" ]; then
  echo "Version in build.sbt: ${RED_TEXT}${VERSION_SBT}${RESET_TEXT}, in MengerCLIOptions.scala: ${RED_TEXT}${VERSION_SOURCE}${RESET_TEXT}"
  STATUS=1
else
  echo "Version: ${GREEN_TEXT}${VERSION_SBT}${RESET_TEXT}"
fi
if git tag | ( grep "^${VERSION_SBT}\$" ); then
  echo "Tag ${RED_TEXT}${VERSION_SBT}${RESET_TEXT} already exists ($(git tag | xargs))"
  if [ "$1" != "github" ]; then STATUS=1
  else echo "Pushing anyway due to github argument"
  fi
else echo "Tag ${GREEN_TEXT}${VERSION_SBT}${RESET_TEXT} does not exist"
fi
if [ $STATUS -gt 0 ]
then echo "Status after tag check: ${RED_TEXT}${STATUS}${RESET_TEXT}"
else echo "Status after tag check: ${GREEN_TEXT}${STATUS}${RESET_TEXT}"
fi

xvfb-run -a sbt test --warn || STATUS=1
if [ $STATUS -gt 0 ]
then echo "Status after sbt test: ${RED_TEXT}${STATUS}${RESET_TEXT}"
else echo "Status after sbt test: ${GREEN_TEXT}${STATUS}${RESET_TEXT}"
fi

sbt "scalafix --check" --warn || STATUS=1
if [ $STATUS -gt 0 ]
then echo "Status after scalafix: ${RED_TEXT}${STATUS}${RESET_TEXT}"
else echo "Status after scalafix: ${GREEN_TEXT}${STATUS}${RESET_TEXT}"
fi

sbt "Universal / packageBin" --warn || STATUS=1
VERSION=$(grep 'version :=' build.sbt | cut -d '"' -f 2)
unzip -oq ./target/universal/menger-${VERSION}.zip || STATUS=1
xvfb-run -a ./menger-${VERSION}/bin/menger --level 2 --timeout 0.1 --sponge-type cube --lines || STATUS=1
xvfb-run -a ./menger-${VERSION}/bin/menger --level 4 --timeout 0.1 --sponge-type square --lines || STATUS=1
xvfb-run -a ./menger-${VERSION}/bin/menger --level 2 --timeout 0.1 --sponge-type tesseract-sponge --lines || STATUS=1
xvfb-run -a ./menger-${VERSION}/bin/menger --level 2 --timeout 0.1 --sponge-type tesseract-sponge-2 --lines || STATUS=1
# Test animation and file output
rm -f test_image*.png
xvfb-run -a ./menger-${VERSION}/bin/menger \
  --level 1 --sponge-type tesseract-sponge-2 --animate frames=5:rot-y-w=0-90:rot-y=0-30 --save-name test_image%d.png || STATUS=1
ls test_image*.png 2>&1 || STATUS=1
rm -f test_image*.png
# Test invalid sponge type exits with error code
xvfb-run -a ./menger-${VERSION}/bin/menger --level 1 --timeout 0.1 --sponge-type invalid 2>/dev/null && STATUS=1
# Test fractional levels
for TYPE in cube square # tesseract-sponge tesseract-sponge-2
do
  xvfb-run -a ./menger-${VERSION}/bin/menger --level 1.5 --timeout 0.1 --sponge-type $TYPE || STATUS=1
done

if [ $STATUS -gt 0 ]
then echo "Status after running built: ${RED_TEXT}${STATUS}${RESET_TEXT}"
else echo "Status after running built: ${GREEN_TEXT}${STATUS}${RESET_TEXT}"
fi

if [ $STATUS -gt 0 ]; then
  commit_msg=$(git log --oneline | head -n 1 | cut -d' ' -f 2-)
  if echo "$commit_msg" | grep '^WIP:'; then
    echo >&2 "Found WIP commit, pushing in spite of failed test suite"
    STATUS=0
  fi
fi

exit $STATUS
